#!/bin/bash

# Function to check password strength
check_password_strength() {
    local password="$1"
    # Use regex to check password strength
    if [[ "$password" =~ ^(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[!@#\$%^&*()-_+=])[A-Za-z0-9!@#\$%^&*()-_+=]{8,}$ ]]; then
        echo "Password is strong."
        return 0
    else
        echo "Password is weak. It must contain at least one uppercase letter, one lowercase letter, one digit, one special character, and be at least 8 characters long."
        return 1
    fi
}

# Function to add a new credential
add_credential() {
    local username="$1"
    local password="$2"
    local service="$3"
    local filename="${service}_credentials.txt"

    if [ -f "$filename" ]; then
        echo "$username:$password" >> "$filename"
        echo "Credential added for $service."
    else
        touch "$filename"
        echo "$username:$password" > "$filename"
        echo "Credential file created for $service."
    fi
}

# Function to update an existing credential
update_credential() {
    local username="$1"
    local password="$2"
    local service="$3"
    local filename="${service}_credentials.txt"

    if [ -f "$filename" ]; then
        sed -i "s/^$username:.*$/$username:$password/" "$filename"
        echo "Credential updated for $service."
    else
        echo "Credential file does not exist for $service."
    fi
}

# Function to delete a credential
delete_credential() {
    local username="$1"
    local service="$2"
    local filename="${service}_credentials.txt"

    if [ -f "$filename" ]; then
        sed -i "/^$username:/d" "$filename"
        echo "Credential deleted for $service."
    else
        echo "Credential file does not exist for $service."
    fi
}

# Function to backup credential files
backup_credentials() {
    local backup_dir="credential_backups"
    mkdir -p "$backup_dir"
    cp *_credentials.txt "$backup_dir"
    echo "Credentials backed up to $backup_dir."
}

# Function to restore credential files from backup
restore_credentials() {
    local backup_dir="credential_backups"
    if [ -d "$backup_dir" ]; then
        cp "$backup_dir"/*_credentials.txt .
        echo "Credentials restored from backup."
    else
        echo "No backup directory found."
    fi
}

# Main function to manage credentials
main() {
    echo "Credential Management Tool"

    PS3="Select an option: "
    options=("Add Credential" "Update Credential" "Delete Credential" "Backup Credentials" "Restore Credentials" "Exit")
    select opt in "${options[@]}"
    do
        case $REPLY in
            1)  read -p "Enter username: " username
                read -sp "Enter password: " password
                echo
                check_password_strength "$password" || continue
                read -p "Enter service: " service
                add_credential "$username" "$password" "$service"
                ;;
            2)  read -p "Enter username: " username
                read -sp "Enter new password: " password
                echo
                check_password_strength "$password" || continue
                read -p "Enter service: " service
                update_credential "$username" "$password" "$service"
                ;;
            3)  read -p "Enter username: " username
                read -p "Enter service: " service
                delete_credential "$username" "$service"
                ;;
            4)  backup_credentials
                ;;
            5)  restore_credentials
                ;;
            6)  echo "Exiting."
                break
                ;;
            *)  echo "Invalid option. Please select again."
                ;;
        esac
    done
}

# Execute the main function
main