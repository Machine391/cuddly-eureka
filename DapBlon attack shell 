#!/bin/bash

# ANSI color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
CYAN='\033[0;36m'
BOLD='\033[1m'
RESET='\033[0m'

# Define global variables
CONFIG_FILE="config.txt"

# Function to load configuration from file
load_configuration() {
    if [ -f "$CONFIG_FILE" ]; then
        source "$CONFIG_FILE"
    fi
}

# Function to save configuration to file
save_configuration() {
    if [ ${#ALIASES[@]} -ne 0 ]; then
        declare -p ALIASES > "$CONFIG_FILE"
    fi
}

# Function to load aliases from configuration
load_aliases() {
    if [ -f "$CONFIG_FILE" ]; then
        source "$CONFIG_FILE"
    fi
}

# Function to execute command with expanded aliases
execute_command() {
    local command="$1"

    # Expand aliases
    for alias_name in "${!ALIASES[@]}"; do
        command="${command//$alias_name/${ALIASES[$alias_name]}}"
    done

    # Execute command
    eval "$command"
}

# Function to display documentation
display_documentation() {
    echo -e "${BOLD}Welcome to the SecretShell!${RESET}"
    echo -e "${BOLD}${RED}      _              _     _${RESET}"
    echo -e "${BOLD}${RED}     | |            | |   | |${RESET}"
    echo -e "${BOLD}${RED}   __| | __ _ _ __ | |__ | | ___  _ __${RESET}"
    echo -e "${BOLD}${RED}  / _\` |/ _\` | '_ \| '_ \| |/ _ \| '_ \ ${RESET}"
    echo -e "${BOLD}${RED} | (_| | (_| | |_) | |_) | | (_) | | | |${RESET}"
    echo -e "${BOLD}${RED}  \__,_|\__,_| .__/|_.__/|_|\___/|_| |_|${RESET}"
    echo -e "${BOLD}${RED}             | |${RESET}"
    echo -e "${BOLD}${RED}             |_|${RESET}"
    echo "This shell supports the following commands:"
    echo -e "${GREEN}- cd <directory>:${RESET} Change current directory."
    echo -e "${GREEN}- pwd:${RESET} Print current directory."
    echo -e "${GREEN}- echo <message>:${RESET} Display a message."
    echo -e "${GREEN}- cp <source> <destination>:${RESET} Copy file or directory."
    echo -e "${GREEN}- mv <source> <destination>:${RESET} Move file or directory."
    echo -e "${GREEN}- wget <URL>:${RESET} Download file from the internet."
    echo -e "${GREEN}- cat <file>:${RESET} Display contents of a file."
    echo -e "${GREEN}- touch <file>:${RESET} Create an empty file."
    echo -e "${GREEN}- git clone <repository>:${RESET} Clone a Git repository."
    echo -e "${GREEN}- nano <file>:${RESET} Open a file in the Nano text editor."
    echo -e "${GREEN}- locate <keyword>:${RESET} Search for files using locate."
    echo -e "${GREEN}- exit:${RESET} Exit the shell."
    echo -e "${GREEN}- alias <name>='<command>':${RESET} Define an alias for a command."
    echo -e "${GREEN}- source <script.sh>:${RESET} Execute a shell script."
    echo -e "${GREEN}- /:${RESET} Navigate to the root directory."
    echo -e "${GREEN}- ps:${RESET} Display information about active processes."
    echo -e "${GREEN}- cp -Z <source> <destination>:${RESET} Compress and move file or directory."
    echo -e "${GREEN}- dd <if=input file> <of=output file> <bs=block size> <count=number of blocks>:${RESET} Convert and copy a file."
    echo -e "${GREEN}- sudo <command>:${RESET} Execute a command as a superuser."
    echo -e "${GREEN}- sudo su:${RESET} Switch to the superuser account."
    echo -e "${GREEN}- sudo apt update:${RESET} Update package lists."
    echo -e "${GREEN}- sudo apt upgrade:${RESET} Upgrade installed packages."
    echo -e "${GREEN}- sudo apt-get install <package name>:${RESET} Install a package."
    echo -e "${GREEN}- sudo apt-get remove <package name>:${RESET} Remove a package."
    echo -e "${GREEN}- sudo apt-get purge <package name>:${RESET} Remove a package and its configuration files."
    echo -e "${GREEN}- sudo apt-get autoremove:${RESET} Remove unused packages."
    echo -e "${GREEN}- sudo apt-get autoclean:${RESET} Remove old package cache."
    echo -e "${GREEN}- sudo apt-get clean:${RESET} Delete downloaded package files."
    echo -e "${GREEN}- git add <file>:${RESET} Add file contents to the index."
    echo -e "${GREEN}- git commit -m <message>:${RESET} Record changes to the repository."
    echo -e "${GREEN}- git push origin <branch>:${RESET} Push changes to the remote repository."
    echo -e "${GREEN}- git pull origin <branch>:${RESET} Fetch and merge changes from the remote repository."
    echo -e "${GREEN}- ls:${RESET} List directory contents."
    echo -e "${GREEN}- ls -l:${RESET} List directory contents in long format."
    echo -e "${GREEN}- rm <file>:${RESET} Remove files or directories."
    echo -e "${GREEN}- rm -r <directory>:${RESET} Remove directories and their contents recursively."
    echo -e "${GREEN}- netstat:${RESET} Print network connections, routing tables, interface statistics, masquerade connections, and multicast memberships."
    echo -e "${GREEN}- ifconfig:${RESET} Display information about network interfaces."
    echo -e "${GREEN}- history:${RESET} Display the command history."
    echo -e "${GREEN}- grep <pattern> <file>:${RESET} Search for patterns in files."
    echo -e "${GREEN}- chmod <permissions> <file>:${RESET} Change file permissions."
    echo -e "${GREEN}- chown <user>:<group> <file>:${RESET} Change file owner and group."
    echo -e "${GREEN}- less <file>:${RESET} View file contents one screen at a time."
    echo -e "${GREEN}- more <file>:${RESET} View file contents one page at a time."
    echo -e "${GREEN}- clear:${RESET} Clear the terminal screen."
    echo -e "${GREEN}- nmap <options> <target>:${RESET} Network exploration and security auditing tool."
    echo -e "${GREEN}- msfconsole:${RESET} Launch Metasploit Framework interactive shell."
    echo -e "${GREEN}- set <option> <value>:${RESET} Set options for Metasploit Framework."
    echo -e "${GREEN}- kismet:${RESET} Wireless network detector, sniffer, and intrusion detection system."
    echo -e "${GREEN}- john:${RESET} Password cracker tool (John the Ripper)."
    echo -e "${GREEN}- mimikatz:${RESET} Dump credentials from memory or perform pass-the-hash attacks."
    echo -e "${GREEN}- install_mimikatz:${RESET} Install Mimikatz on the system."
    echo -e "${GREEN}- macchanger -r <interface>:${RESET} Randomize MAC address of a network interface."
    echo -e "${GREEN}- tshark -i <interface>:${RESET} Network protocol analyzer (Wireshark CLI)."
    echo -e "${GREEN}- wireshark:${RESET} Network protocol analyzer (GUI)."
    echo ""
}

# Function for tab completion
custom_tab_completion() {
    local cur prev commands
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    commands="cd pwd echo cp mv wget cat touch git clone nano locate exit alias"
    commands+=" source / ps dd sudo apt-get apt install remove purge autoremove autoclean clean"
    commands+=" add commit push pull ls rm netstat ifconfig history grep chmod chown less more clear"
    commands+=" nmap msfconsole set kismet john mimikatz install_mimikatz macchanger tshark wireshark"

    case "$prev" in
        "cd"|"cp"|"mv"|"cat"|"touch"|"git"|"nano")
            COMPREPLY=($(compgen -d -- "$cur"))
            return 0
            ;;
        "echo"|"wget"|"locate")
            return 0
            ;;
        "alias"|"source")
            COMPREPLY=($(compgen -f -- "$cur"))
            return 0
            ;;
        *)
            COMPREPLY=($(compgen -W "$commands" -- "$cur"))
            return 0
            ;;
    esac
}

# Main function
main() {
    # Load configuration
    load_configuration
    load_aliases

    # Enable custom tab completion
    complete -F custom_tab_completion -o filenames -o nospace source
    complete -F custom_tab_completion -o filenames -o nospace alias

    # Display documentation
    display_documentation

    echo "You can start# entering commands below."

    while true; do
        # Read user input
        read -e -p "$ " input

        # Check for exit command
        if [ "$input" == "exit" ]; then
            echo "Exiting..."
            break
        fi

        # Handle other commands
        case "$input" in
            alias\ *)
                # Define alias
                alias_command="${input#alias }"
                eval "$alias_command"
                save_configuration
                ;;
            source\ *)
                # Execute shell script
                script_path="${input#source }"
                if [ -f "$script_path" ]; then
                    source "$script_path"
                else
                    echo -e "${RED}Error:${RESET} Script '$script_path' not found."
                fi
                ;;
            *)
                # Execute command
                execute_command "$input"
                ;;
        esac
    done
}

# Call the main function
main