import tkinter as tk
from tkinter import scrolledtext
import requests
from bs4 import BeautifulSoup
import tensorflow as tf
from tensorflow.keras.layers import LSTM, Transformer
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
import spacy
import re
import logging

# Set up logging
logging.basicConfig(filename='threat_detection.log', level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')

# Function to validate URL format
def validate_url(url):
    regex = re.compile(
        r'^(?:http|ftp)s?://'  # http:// or https:// or ftp://
        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+(?:[A-Z]{2,6}\.?|[A-Z0-9-]{2,}\.?)|'  # domain...
        r'localhost|'  # localhost...
        r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})'  # ...or IP
        r'(?::\d+)?'  # optional port
        r'(?:/?|[/?]\S+)$', re.IGNORECASE)
    return bool(re.match(regex, url))

# Function to fetch real-time threat intelligence updates from a security blog
def fetch_threat_updates(url):
    try:
        if not validate_url(url):
            raise ValueError("Invalid URL format.")
        response = requests.get(url)
        if response.status_code == 200:
            soup = BeautifulSoup(response.content, 'html.parser')
            updates = soup.find_all('div', class_='threat-update')
            threat_updates = [update.text.strip() for update in updates]
            return threat_updates
        else:
            logging.error(f"Failed to fetch threat updates. Status Code: {response.status_code}")
            print("Failed to fetch threat updates.")
            return []
    except Exception as e:
        logging.error(f"Error fetching threat updates: {e}")
        print("Error fetching threat updates:", e)
        return []

# Function to preprocess threat intelligence updates
def preprocess_threat_updates(threat_updates, max_sequence_length):
    try:
        tokenizer = Tokenizer()
        tokenizer.fit_on_texts(threat_updates)
        sequences = tokenizer.texts_to_sequences(threat_updates)
        padded_sequences = pad_sequences(sequences, maxlen=max_sequence_length, padding='post')
        return padded_sequences, tokenizer.word_index
    except Exception as e:
        logging.error(f"Error preprocessing threat updates: {e}")
        print("Error preprocessing threat updates:", e)
        return None, None

# Function to build a recurrent neural network (RNN) model
def build_rnn_model(vocab_size, embedding_dim, max_sequence_length):
    try:
        model = tf.keras.Sequential([
            tf.keras.layers.Embedding(input_dim=vocab_size, output_dim=embedding_dim, input_length=max_sequence_length),
            LSTM(units=64),
            tf.keras.layers.Dense(1, activation='sigmoid')
        ])
        model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
        return model
    except Exception as e:
        logging.error(f"Error building RNN model: {e}")
        print("Error building RNN model:", e)
        return None

# Function to build a transformer model
def build_transformer_model(vocab_size, embedding_dim, max_sequence_length):
    try:
        model = tf.keras.Sequential([
            tf.keras.layers.Embedding(input_dim=vocab_size, output_dim=embedding_dim, input_length=max_sequence_length),
            Transformer(num_layers=2, d_model=128, num_heads=8, dff=128, input_vocab_size=vocab_size, maximum_position_encoding=max_sequence_length),
            tf.keras.layers.GlobalAveragePooling1D(),
            tf.keras.layers.Dense(1, activation='sigmoid')
        ])
        model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
        return model
    except Exception as e:
        logging.error(f"Error building Transformer model: {e}")
        print("Error building Transformer model:", e)
        return None

# Load pre-trained NLP model
try:
    nlp = spacy.load("en_core_web_sm")
except Exception as e:
    logging.error(f"Error loading pre-trained NLP model: {e}")
    print("Error loading pre-trained NLP model:", e)

# Class for the Threat Detection GUI
class ThreatDetectionGUI:
    def __init__(self, master):
        self.master = master
        master.title("Threat Detection System")

        self.label = tk.Label(master, text="Real-time Threat Intelligence Updates:")
        self.label.pack()

        self.text_area = scrolledtext.ScrolledText(master, width=50, height=10)
        self.text_area.pack()

        self.fetch_button = tk.Button(master, text="Fetch Updates", command=self.fetch_updates)
        self.fetch_button.pack()

        self.predict_button = tk.Button(master, text="Predict Threats", command=self.predict_threats)
        self.predict_button.pack()

    def fetch_updates(self):
        # Fetch real-time threat intelligence updates
        url = "https://example.com/threat-updates"  # Example URL of a security blog
        threat_updates = fetch_threat_updates(url)
        self.text_area.insert(tk.END, "Real-time Threat Intelligence Updates:\n")
        for update in threat_updates:
            self.text_area.insert(tk.END, f"- {update}\n")

    def predict_threatsdef predict_threats(self):
        try:
            # Placeholder code for threat prediction using the selected model
            self.text_area.insert(tk.END, "Predicting threats...\n")
            architecture = "RNN"  # Example architecture choice
            vocab_size = 10000  # Example vocabulary size
            embedding_dim = 100  # Example embedding dimension
            max_sequence_length = 100  # Example maximum sequence length
            model = build_rnn_model(vocab_size, embedding_dim, max_sequence_length)
            if model:
                self.text_area.insert(tk.END, f"Using {architecture} architecture for threat prediction.\n")
                # Perform threat prediction using the model
                try:
                    # Placeholder code for threat prediction
                    self.text_area.insert(tk.END, "Threat prediction completed.\n")
                except Exception as e:
                    logging.error(f"Error predicting threats: {e}")
                    print("Error predicting threats:", e)
                    self.text_area.insert(tk.END, f"Error predicting threats: {e}\n")
            else:
                self.text_area.insert(tk.END, "Failed to build the model for threat prediction.\n")
        except Exception as e:
            logging.error(f"Error in predict_threats method: {e}")
            print("Error in predict_threats method:", e)

# Main function to initialize the GUI
def main():
    root = tk.Tk()
    app = ThreatDetectionGUI(root)
    root.mainloop()

# Execute the main function to run the GUI
if __name__ == "__main__":
    main()