#!/bin/bash

# ANSI color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
CYAN='\033[0;36m'
BOLD='\033[1m'
RESET='\033[0m'

# Define global variables
CONFIG_FILE="config.txt"

# Function to load configuration from file
load_configuration() {
    if [ -f "$CONFIG_FILE" ]; then
        source "$CONFIG_FILE"
    fi
}

# Function to save configuration to file
save_configuration() {
    if [ ${#ALIASES[@]} -ne 0 ]; then
        declare -p ALIASES > "$CONFIG_FILE"
    fi
}

# Function to load aliases from configuration
load_aliases() {
    if [ -f "$CONFIG_FILE" ]; then
        source "$CONFIG_FILE"
    fi
}

# Function to execute command with expanded aliases
execute_command() {
    local command="$1"

    # Expand aliases
    for alias_name in "${!ALIASES[@]}"; do
        command="${command//$alias_name/${ALIASES[$alias_name]}}"
    done

    # Execute command
    eval "$command"
}

# Function to display documentation
display_documentation() {
    echo -e "${BOLD}Welcome to the Secret Shell!${RESET}"
    echo "This shell supports the following commands:"
    echo -e "${GREEN}- cd <directory>:${RESET} Change current directory."
    echo -e "${GREEN}- pwd:${RESET} Print current directory."
    echo -e "${GREEN}- echo <message>:${RESET} Display a message."
    echo -e "${GREEN}- cp <source> <destination>:${RESET} Copy file or directory."
    echo -e "${GREEN}- mv <source> <destination>:${RESET} Move file or directory."
    echo -e "${GREEN}- wget <URL>:${RESET} Download file from the internet."
    echo -e "${GREEN}- cat <file>:${RESET} Display contents of a file."
    echo -e "${GREEN}- touch <file>:${RESET} Create an empty file."
    echo -e "${GREEN}- git clone <repository>:${RESET} Clone a Git repository."
    echo -e "${GREEN}- nano <file>:${RESET} Open a file in the Nano text editor."
    echo -e "${GREEN}- locate <keyword>:${RESET} Search for files using locate."
    echo -e "${GREEN}- exit:${RESET} Exit the shell."
    echo -e "${GREEN}- alias <name>='<command>':${RESET} Define an alias for a command."
    echo -e "${GREEN}- source <script.sh>:${RESET} Execute a shell script."
    echo -e "${GREEN}- /:${RESET} Navigate to the root directory."
    echo -e "${GREEN}- sudo apt-get update:${RESET} Update package lists."
    echo -e "${GREEN}- sudo apt-get upgrade:${RESET} Upgrade all installed packages."
    echo -e "${GREEN}- sudo apt-get install <package>:${RESET} Install a package."
    echo -e "${GREEN}- sudo apt-get remove <package>:${RESET} Remove a package."
    echo -e "${GREEN}- sudo apt-get purge <package>:${RESET} Remove a package along with its configuration files."
    echo -e "${GREEN}- sudo apt-get autoremove:${RESET} Remove automatically installed packages that are no longer needed."
    echo -e "${GREEN}- sudo apt-get autoclean:${RESET} Remove old package cache."
    echo -e "${GREEN}- sudo apt-get clean:${RESET} Delete downloaded package files."
    echo -e "${GREEN}- git add <file>:${RESET} Add file contents to the index."
    echo -e "${GREEN}- git commit -m <message>:${RESET} Record changes to the repository."
    echo -e "${GREEN}- git push origin <branch>:${RESET} Push changes to the remote repository."
    echo -e "${GREEN}- git pull origin <branch>:${RESET} Fetch and merge changes from the remote repository."
    echo -e "${GREEN}- ls:${RESET} List directory contents."
    echo -e "${GREEN}- ls -l:${RESET} List directory contents in long format."
    echo -e "${GREEN}- rm <file>:${RESET} Remove files or directories."
    echo -e "${GREEN}- rm -r <directory>:${RESET} Remove directories and their contents recursively."
    echo -e "${GREEN}- netstat:${RESET} Print network connections, routing tables, interface statistics, masquerade connections, and multicast memberships."
    echo -e "${GREEN}- ifconfig:${RESET} Display information about network interfaces."
    echo -e "${GREEN}- history:${RESET} Display the command history."
    echo -e "${GREEN}- grep <pattern> <file>:${RESET} Search foroccurrences of a pattern in a file."
    echo -e "${GREEN}- chmod <permissions> <file>:${RESET} Change the permissions of a file."
    echo -e "${GREEN}- chown <user>:<group> <file>:${RESET} Change the owner and group of a file."
    echo -e "${GREEN}- less <file>:${RESET} View file contents one screen at a time."
    echo -e "${GREEN}- more <file>:${RESET} View file contents one screen at a time."
    echo -e "${GREEN}- ps:${RESET} Display information about active processes."
    echo -e "${GREEN}- cp <source> <destination>:${RESET} Copy files and directories."
    echo -e "${GREEN}- dd if=<input file> of=<output file>:${RESET} Copy and convert files."
    echo -e "${GREEN}- mkdir <directory>:${RESET} Create directories."
    echo -e "${GREEN}- sudo su:${RESET} Switch to the superuser."
    echo -e "${GREEN}- sudo:${RESET} Execute a command as the superuser."
    echo -e "${GREEN}- sudo apt install nmap:${RESET} Install the Nmap network scanner."
    echo -e "${GREEN}- sudo apt install metasploit-framework:${RESET} Install the Metasploit Framework."
    echo -e "${GREEN}- sudo apt install kismet:${RESET} Install the Kismet wireless network detector, sniffer, and IDS."
    echo -e "${GREEN}- sudo apt install john:${RESET} Install the John the Ripper password cracker."
    echo -e "${GREEN}- sudo apt install mimikatz:${RESET} Install Mimikatz, a tool for obtaining Windows credentials."
    echo -e "${GREEN}- sudo apt install macchanger:${RESET} Install Macchanger, a tool for changing MAC addresses."
    echo -e "${GREEN}- sudo apt install tshark:${RESET} Install Tshark, a network protocol analyzer."
    echo -e "${GREEN}- sudo apt install wireshark:${RESET} Install Wireshark, a network protocol analyzer and packet sniffer."
    echo ""
}

# Function for tab completion
custom_tab_completion() {
    local cur prev commands
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    commands="cd pwd echo cp mv wget cat touch git clone nano locate exit alias source / sudo apt-get update sudo apt-get upgrade sudo apt-get install sudo apt-get remove sudo apt-get purge sudo apt-get autoremove sudo apt-get autoclean sudo apt-get clean git add git commit git push git pull ls rm netstat ifconfig history grep chmod chown less more ps cp dd mkdir sudo su"

    case "$prev" in
        "cd"|"cp"|"mv"|"cat"|"touch"|"git"|"nano"|"wget"|"locate"|"sudo"|"git"|"ls"|"rm"|"netstat"|"ifconfig"|"history"|"grep"|"chmod"|"chown"|"less"|"more"|"ps"|"cp"|"dd"|"mkdir"|"sudo"|"apt-get")
            COMPREPLY=($(compgen -d -- "$cur"))
            return 0
            ;;
        "echo")
            return 0
            ;;
        "alias"|"source")
            COMPREPLY=($(compgen -f -- "$cur"))
            return 0
            ;;
        *)
            COMPREPLY=($(compgen -W "$commands" -- "$cur"))
            return 0
            ;;
    esac
}

# Main function
main() {
    # Load configuration
    load_configuration
    load_aliases

    # Enable custom tab completion
    complete -F custom_tab_completion -o filenames -o nospace source
    complete -F custom_tab_completion -o filenames -o nospace alias

    # Display documentation
    display_documentation

    echo "You can start entering commands below."

    while true; do
        # Read user input
        read -e -p "$ " input

        # Check for exit command
        if [ "$input" == "exit" ]; then
            echo "Exiting..."
            break
        fi

        # Handle other commands
        case "$input" in
            alias\ *)
                # Define alias
                alias_command="${input#alias }"
                eval "$alias_command"
                save_configuration
                ;;
            source\ *)
                # Execute shell script
                script_path="${input#source }"
                if [ -f "$script_path" ]; then
                    source "$script_path"
                else
                    echo -e "${RED}Error:${RESET} Script '$script_path' not found."
                fi
                ;;
            *)
                # Execute command
                execute_command "$input"
                ;;
        esac
    done
}

# Call the main function
main