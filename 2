<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="#fff" class="bi bi-robot" viewBox="0 0 16 16">
  <path d="M6 12.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 0 1h-3a.5.5 0 0 1-.5-.5ZM3 8.062C3 6.76 4.235 5.765 5.53 5.886a26.58 26.58 0 0 0 4.94 0C11.765 5.765 13 6.76 13 8.062v1.157a.933.933 0 0 1-.765.935c-.845.147-2.34.346-4.235.346-1.895 0-3.39-.2-4.235-.346A.933.933 0 0 1 3 9.219V8.062Zm4.542-.827a.25.25 0 0 0-.217.068l-.92.9a24.767 24.767 0 0 1-1.871-.183.25.25 0 0 0-.068.495c.55.076 1.232.149 2.02.193a.25.25 0 0 0 .189-.071l.754-.736.847 1.71a.25.25 0 0 0 .404.062l.932-.97a25.286 25.286 0 0 0 1.922-.188.25.25 0 0 0-.068-.495c-.538.074-1.207.145-1.98.189a.25.25 0 0 0-.166.076l-.754.785-.842-1.7a.25.25 0 0 0-.182-.135Z"/>
  <path d="M8.5 1.866a1 1 0 1 0-1 0V3h-2A4.5 4.5 0 0 0 1 7.5V8a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1v1a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2v-1a1 1 0 0 0 1-1V9a1 1 0 0 0-1-1v-.5A4.5 4.5 0 0 0 10.5 3h-2V1.866ZM14 7.5V13a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V7.5A3.5 3.5 0 0 1 5.5 4h5A3.5 3.5 0 0 1 14 7.5Z"/>
</svg><svg xmlns="http://www.w3.org/2000/svg" fill="#ffffff" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
    <path stroke-linecap="round" stroke-linejoin="round" d="M6 12L3.269 3.126A59.768 59.768 0 0121.485 12 59.77 59.77 0 013.27 20.876L5.999 12zm0 0h7.5" />
</svg><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="#fff" class="bi bi-person" viewBox="0 0 16 16">
  <path d="M8 8a3 3 0 1 0 0-6 3 3 0 0 0 0 6Zm2-3a2 2 0 1 1-4 0 2 2 0 0 1 4 0Zm4 8c0 1-1 1-1 1H3s-1 0-1-1 1-4 6-4 6 3 6 4Zm-1-.004c-.001-.246-.154-.986-.832-1.664C11.516 10.68 10.289 10 8 10c-2.29 0-3.516.68-4.168 1.332-.678.678-.83 1.418-.832 1.664h10Z"/>
</svg>client/script.js#!/bin/bash

# Define API keys
phoneapis_key="YOUR_NUMVERIFY_API_KEY"
IPStackAPI_key="YOUR_IPSTACK_API_KEY"
gmap_key="YOUR_GOOGLE_MAPS_API_KEY"
shodan_api_key="YOUR_SHODAN_API_KEY"

# Function to check if a command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Check if netcat (nc) command exists
if ! command_exists nc; then
    echo "Error: netcat (nc) command not found. Please install it and try again."
    exit 1
fi

# Check if the user has provided a host/IP address
if [ -z "$1" ]; then
    echo "Usage: $0 <host>"
    exit 1
fi

host="$1"

# Function to check if a port is open
check_port() {
    port=$1
    timeout 1 nc -zv "$host" "$port" >/dev/null 2>&1
    if [ $? -eq 0 ]; then
        echo "Port $port is open"
    fi
}

# Function to run Shodan search
run_shodan_search() {
    local query="$1"
    local url="https://api.shodan.io/shodan/host/search?key=$shodan_api_key&query=$query"
    echo "Running Shodan search for: $query"
    curl -s "$url"
}

# Function to run Numverify API
run_numverify_api() {
    local phone_number="$1"
    local url="http://apilayer.net/api/validate?access_key=$phoneapis_key&number=$phone_number"
    echo "Running Numverify API for phone number: $phone_number"
    curl -s "$url"
}

# Function to run IPStack API
run_ipstack_api() {
    local ip_address="$1"
    local url="http://api.ipstack.com/$ip_address?access_key=$IPStackAPI_key"
    echo "Running IPStack API for IP address: $ip_address"
    curl -s "$url"
}

# Function to run Google Maps API
run_google_maps_api() {
    echo '{"message": "healthy"}'
}

# Function to echo the provided JSON response
echo_json_response() {
    echo '{
    "payload": { },
    "system": {
        "powerSave": { },
        "rate": { },
        "syncGeofences": true,
        "detectOutliers": true,
        "disableTracking": { },
        "stateVersion": 0,
        "lastModifiedGeofenceTimestamp": 4102448400000,
        "sensorAlarmConfig": { },
        "wlanConnectivityEnabled": true,
        "wlanConfigurations": [ ],
        "sensorLoggingEnabled": true,
        "sensorLoggingConfigurations": [ ],
        "sensorLoggingTag": "string"
    },
    "timestamp": 2
}'
}

# Function to echo the range from 2 to 4102448400000
echo_range() {
    seq 2 4102448400000
}

# Function to echo the provided JSON response
echo_json_response_2() {
    echo '[{
    "scan": {
        "wlan": [
            { "mac": "1c:1d:86:07:01:0f", "powrx": -45 },
            { "mac": "e4:f4:c6:d9:85:59", "powrx": -39 },
            { "mac": "1c:1d:86:07:01:0d", "powrx": -43 },
            { "mac": "1c:1d:86:07:01:0b", "powrx": -44 },
            { "mac": "1c:1d:86:07:01:04", "powrx": -58 },
            { "mac": "1c:1d:86:07:01:03", "powrx": -59 }
        ]
    },
    "payload": {
        "sensor": "data"
    },
    "timestamp": 1515169948976
}]'
}

# Main function to execute the script
main() {
    # Check common ports
    for port in {1..1024}; do
        check_port "$port" &
    done
    wait

    # Example usage of Shodan search
    run_shodan_search "apache"

    # Example usage of Numverify API
    run_numverify_api "9144193242"

    # Example usage of IPStack API
    run_ipstack_api "192.168.1.228"

    # Example usage of Google Maps API
    run_google_maps_api

    # Echo the provided JSON response
    echo_json_response

    # Echo the range from 2 to 4102448400000
    echo_range

    # Echo the provided JSON response 2
    echo_json_response_2
}

# Execute the main function
main#!/bin/bash

echo "Welcome to the script!"
echo "Please choose an option:"
echo "1. Option 1"
echo "2. Option 2"
echo "3. Option 3"
echo "4. Quit"

read -p "Enter your choice: " choice

case $choice in
    1)
        echo "You chose Option 1"
        # Add your code for Option 1 here
        ;;
    2)
        echo "You chose Option 2"
        # Add your code for Option 2 here
        ;;
    3)
        echo "You chose Option 3"
        # Add your code for Option 3 here
        ;;
    4)
        echo "Exiting the script. Goodbye!"
        exit 0
        ;;
    *)
        echo "Invalid choice. Please choose a valid option."
        ;;
esac